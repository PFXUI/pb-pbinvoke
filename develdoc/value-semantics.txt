Семантика работы со значениями (n_pi_value и потомки)

1.Терминология.
Контекст.
	С каждым значением хранящимся в n_pi_value ассоциирован контекст - 
	область памяти в которой хранятся временные буферы и другая информация
	необходимость хранения которой возникает при работе со значением.
	
Очистка контекста.
	Освобождение всех выделенных буферов в контексте и обнуление всех 
	его переменных.
	После очистки все внешние указатели, ссылающиеся на данные контекста 
	становятся невалидными (однако это не проверяется) и не могут быть 
	более использованы т.к. содержат ссылки на несуществующие уже в 
	памяти объекты.

2. Значение простых типов
n_pi_value -> n_pi_XXX_type

Создание значения 
n_pi_XXX_type.of_create_value(defvalue).

Присвоение в значение (set).
При присвоении в значение контекст значение очищается.
Возможны следующие варианты присвоения:
a) передано непустое (Not IsNull()) значение встроенного типа PB
	Значение PB копируется в контекст n_pi_value.
	Если  n_pi_XXX_type==n_pi_string_type и передано число, то оно присваивается
	в качестве адреса данных но сами данные не копируются.
b) передано значение n_pi_value
	b1) передан указатель на n_pi_XXX_type
		 Данные на которые ссылается переданный указатель копируются (non deep?) в контекст 
		 целевого значения.
	b2) передан указатель на тип отличный от n_pi_XXX_type
	    Ошибка.
 	b3) передано значение типа n_pi_XXX_type
		 Данные из исходного контекста копируются (non deep?) в контекст 
		 целевого значения.
 	b4) передано значение типа отличного от n_pi_XXX_type
 	    Ошибка.
c) передано пустое значение null (PB)
   В этом случае значению в контексте присваивается 0 (или аналог для типа данных)


3. Ссылка
a) Ссылка на объект-структуру в PB
n_pi_value в котором хранится адрес и контекст тот же что и в исходном значении, 
и включен флаг "ссылка", чтобы при удалении ссылки не удалялся контекст.

б) Ссылка в C++ ( type&)
n_pi_value -> n_pi_ref_type -> n_pi_XXX_type



4. Указатель.
n_pi_value -> n_pi_ptr_type -> n_pi_XXX_type
           -> ?n_pi_value -> n_pi_XXX_type
Создание указателя (n_pi_XXX_type.of_create_ptr(addr = 0)).

Присвоение в указатель (set).
При присвоении в указатель контекст указателя очищается.
Возможны следующие варианты присвоения:
a) Передано значение ulong PB
	Это число присваивается как новое значение указателя.
	Вызывающий код должен гарантировать соответствие типа данных
	и сохранность данных на все время пока ссылка хранится в целевом указателе.
b) передан n_pi_value-указатель на n_pi_XXX_type
   Значение переданного указателя копируется в контекст целевого указателя 
   и ссылка на исходный объект-указатель копируется в целевой объект
   однако данные на которые ссылается значение указателя не копируются
   и задача вызывающего кода обеспечить их существование в исходном контексте
   на время работы с целевым указателем.
c) Другое значение.
	Ошибка.


Чтение из указателя (get).
Возвращается значение (ulong) указателя.

Разыменование указателя (deref).
Возвращается ссылка n_pi_value типа n_pi_XXX_type с тем же контекстом.



5. Структура

Присвоение в структуру (set)
Возможны следующие варианты присвоения:
a)	Передан n_pi_struct.
   Тело переданной структуры копируется в целевой контекст.
b) Передан 0
   Структура в целевом контексте инициализируется нулями во всех полях.

Чтение структуры (get)
При чтении из значения являющегося структурой, возвращается лишь объект-ссылка на структуру
с тем же контекстом. Присвоения в поля этой ссылки будут менять исходную структуру.


